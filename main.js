/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => RandomRetrievalPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian3 = require("obsidian");
var os = __toESM(require("os"));

// src/set_tab.ts
var import_obsidian = require("obsidian");
var RandomRetrievalSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(plugin) {
    super(plugin.app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("LLM retriever language").setDesc("zh for Chinese, en for English").addText(
      (text) => text.setPlaceholder("zh").setValue(this.plugin.settings.setLanguage).onChange(async (value) => {
        this.plugin.settings.setLanguage = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("Open how many notes").setDesc("Default number of notes to open").addText(
      (text) => text.setPlaceholder("3").setValue(this.plugin.settings.setNoteNum.toString()).onChange(async (value) => {
        this.plugin.settings.setNoteNum = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("Conda environment name").setDesc("Default conda environment").addText(
      (text) => text.setPlaceholder("rr-env").setValue(this.plugin.settings.setCondaEnv).onChange(async (value) => {
        this.plugin.settings.setCondaEnv = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("Path to plugin configuration").setDesc("Default").addText(
      (text) => text.setPlaceholder("default").setValue(this.plugin.settings.PATH_TO_JSON).onChange(async (value) => {
        this.plugin.settings.PATH_TO_JSON = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("Path to plugin application").setDesc("Default").addText(
      (text) => text.setPlaceholder("default").setValue(this.plugin.settings.PATH_TO_APP).onChange(async (value) => {
        this.plugin.settings.PATH_TO_APP = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("Open in new leaf").setDesc("Default setting for opening random notes").addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.openInNewLeaf);
      toggle.onChange(this.plugin.setOpenInNewLeaf);
    });
  }
};

// src/set_modal.ts
var import_obsidian2 = require("obsidian");
var InputModal = class extends import_obsidian2.Modal {
  constructor(app) {
    super(app);
    this.inputValue = "";
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.classList.add("random-retrieval", "modal-content");
    const titleEl = contentEl.createEl("h2", { text: "I am wondering.." });
    titleEl.classList.add("random-retrieval", "modal-title");
    const inputEl = contentEl.createEl("input", {
      type: "text",
      placeholder: "about.."
    });
    inputEl.classList.add("random-retrieval", "modal-input");
    inputEl.oninput = (e) => {
      const target = e.target;
      this.inputValue = target.value;
    };
    const buttonEl = contentEl.createEl("button", { text: "NightWalk \u{1F4A1}" });
    buttonEl.classList.add("random-retrieval", "button-nightwalk");
    buttonEl.addEventListener("click", () => {
      new import_obsidian2.Notice(`Retrieving..: ${this.inputValue}`);
      this.resolve(this.inputValue);
      this.close();
    });
    inputEl.addEventListener("keydown", (event) => {
      if (event.key === "Enter") {
        buttonEl.click();
      }
    });
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
  openAndGetValue() {
    return new Promise((resolve) => {
      this.resolve = resolve;
      this.open();
    });
  }
};

// src/main.ts
var import_child_process = require("child_process");
var RandomRetrievalPlugin = class extends import_obsidian3.Plugin {
  constructor(app, manifest) {
    super(app, manifest);
    this.ribbonIconEl = void 0;
    this.settings = {
      openInNewLeaf: true,
      setNoteNum: "3",
      setLanguage: "zh",
      vaultPath: `${this.getAbsPath("data.json")}`,
      setCondaEnv: "rr-env",
      PATH_TO_JSON: `${this.getAbsPath("data.json")}/${this.manifest.dir}/data.json`,
      PATH_TO_APP: `${this.getAbsPath("data.json")}/${this.manifest.dir}/`
    };
    this.uvicornProcess = null;
    this.loadSettings = async () => {
      const loadedSettings = await this.loadData();
      if (loadedSettings) {
        this.setOpenInNewLeaf(loadedSettings.openInNewLeaf);
        this.setLanguage(loadedSettings.setLanguage);
        this.setNoteNum(loadedSettings.setNoteNum);
        this.setCondaEnv(loadedSettings.setCondaEnv);
        this.PATH_TO_JSON(loadedSettings.PATH_TO_JSON);
        this.PATH_TO_APP(loadedSettings.PATH_TO_APP);
      } else {
        this.refreshRibbonIcon();
      }
    };
    this.setOpenInNewLeaf = (value) => {
      this.settings.openInNewLeaf = value;
      this.saveData(this.settings);
    };
    this.setLanguage = (value) => {
      this.settings.setLanguage = value;
      this.saveData(this.settings);
    };
    this.setNoteNum = (value) => {
      this.settings.setNoteNum = value;
      this.saveData(this.settings);
    };
    this.setCondaEnv = (value) => {
      this.settings.setCondaEnv = value;
      this.saveData(this.settings);
    };
    this.PATH_TO_JSON = (value) => {
      this.settings.PATH_TO_JSON = value;
      this.saveData(this.settings);
    };
    this.PATH_TO_APP = (value) => {
      this.settings.PATH_TO_APP = value;
      this.saveData(this.settings);
    };
    this.refreshRibbonIcon = () => {
      var _a;
      (_a = this.ribbonIconEl) == null ? void 0 : _a.remove();
      this.ribbonIconEl = this.addRibbonIcon(
        "annoyed",
        "Open Random Note from Search",
        () => {
          const inputModal = new InputModal(this.app);
          inputModal.openAndGetValue().then((inputValue) => {
            this.handleOpenRandomNote(inputValue);
          });
        }
      );
    };
    this.handleOpenRandomNote = async (query) => {
      let fileNames;
      try {
        const response = await (0, import_obsidian3.requestUrl)({
          url: `http://127.0.0.1:8000/search?query=${encodeURIComponent(query)}`,
          method: "GET"
        });
        if (response.status === 200) {
          const noteNum = Number(this.settings.setNoteNum);
          const validNoteNum = isNaN(noteNum) || noteNum <= 0 ? 1 : Math.min(noteNum, response.json.ranker.documents.length);
          fileNames = response.json.ranker.documents.slice(0, validNoteNum).map((doc) => {
            const FilesPath = doc.meta.name;
            let relativePath = FilesPath.replace(this.settings.vaultPath, "");
            return relativePath.replace(".md", "");
          });
          new import_obsidian3.Notice(`Top ${this.settings.setNoteNum} files: ${fileNames.join(", ")}`);
        } else {
          new import_obsidian3.Notice(`Failed: ${response.status}`);
        }
      } catch (error) {
        console.error("Error details:", error);
        if (error.response) {
          new import_obsidian3.Notice(`Failed: ${error.response.status}`);
        } else if (error.request) {
          new import_obsidian3.Notice(`No response received`);
        } else {
          new import_obsidian3.Notice(`Error: ${error.message}`);
        }
      }
      for (const fileName of fileNames) {
        if (fileName) {
          new import_obsidian3.Notice(`Opening ${fileName}`);
          await this.app.workspace.openLinkText(fileName, "", this.settings.openInNewLeaf, {
            active: true
          });
        }
      }
    };
    this.app = app;
  }
  getAbsPath(fileName) {
    let basePath = "";
    let relativePath;
    if (this.app.vault.adapter instanceof import_obsidian3.FileSystemAdapter) {
      basePath = this.app.vault.adapter.getBasePath() || "";
    }
    return basePath;
  }
  async onload() {
    await this.loadSettings();
    this.refreshRibbonIcon();
    this.addSettingTab(new RandomRetrievalSettingTab(this));
    this.runUvicorn();
  }
  async onunload() {
  }
  async saveSettings() {
    await this.saveData(this.settings);
    const jsonString = JSON.stringify(this.settings, null, 2);
  }
  async runUvicorn() {
    if (os.platform() !== "darwin") {
      new import_obsidian3.Notice("This feature is only supported on macOS.");
      return;
    }
    const command = `osascript -e 'tell application "Terminal"  
        activate
        do script "cd ${this.settings.PATH_TO_APP} && conda activate ${this.settings.setCondaEnv} && uvicorn rr_app:rr_app --reload"
        end tell'`;
    this.uvicornProcess = (0, import_child_process.exec)(command, (error, stdout, stderr) => {
      if (error) {
        new import_obsidian3.Notice(`Error: ${error.message}`);
        return;
      }
      if (stderr) {
        new import_obsidian3.Notice(`stderr: ${stderr}`);
        return;
      }
    });
  }
};
//# sourceMappingURL=data:application/json;base64,
